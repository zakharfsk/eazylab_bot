import uuid
import logging
import uuid

import psycopg2
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import OWNER, ADMIN_CHAT, \
    select_object_buttons
from create_bot import bot
from create_keyboards.keyboards import subject_keyboard, start_menu, cancel_keyboard, \
    idz_hight_math_keyboard, idz_hight_math_buttons
from database.db import Orders


class Order(StatesGroup):
    waiting_subject = State()
    waiting_number_idz = State()
    waiting_variant_idz = State()
    waiting_pack_idz = State()


async def start_order(message: types.Message, state: FSMContext):
    try:
        await state.update_data(customer_id=message.from_user.id, order_id=int(uuid.uuid4().fields[-1]))
        await Order.waiting_subject.set()
        await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç.', reply_markup=subject_keyboard(select_object_buttons).add('–û—Ç–º–µ–Ω–∞'))
    except Exception as e:
        logging.exception(e)


async def cancel_order(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.reset_state(with_data=True)

        await message.reply(
            '–í–∏—Ö—ñ–¥ –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–∫–∞–∑—É\n'
            '–í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
            reply_markup=start_menu()
        )

    except Exception as e:
        logging.exception(e)


async def input_subject(message: types.Message, state: FSMContext):
    try:
        subject = message.text

        if subject in select_object_buttons:
            await state.update_data(select_object=subject)
            await Order.next()
            await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ü–î–ó.', reply_markup=idz_hight_math_keyboard().add('–û—Ç–º–µ–Ω–∞'))
        else:
            await message.reply(
                '–£–ø—Å—Å...\n'
                '–ù–∞–∂–∞–ª—å —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–º–∞—î'
            )
    except Exception as e:
        logging.exception(e)


async def input_number_group(message: types.Message, state: FSMContext):
    try:
        num_idz = message.text
        if num_idz in idz_hight_math_buttons:
            await state.update_data(number_idz=num_idz)
            await message.reply('–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É.(–≤ —Ñ–æ—Ä–º–∞—Ç—ñ –ö–Ü-21-2)', reply_markup=cancel_keyboard())
            await Order.next()
        else:
            await message.reply(
                '–£–ø—Å...\n'
                '–ù–∞–∂–∞–ª—å –≤ –Ω–∞—Å –Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –Ü–î–ó'
            )
    except Exception as e:
        logging.exception(e)


async def input_number_in_list(message: types.Message, state: FSMContext):
    try:
        number_group = message.text

        await state.update_data(number_group=number_group)
        await Order.next()
        await message.reply(
            '–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—ñ–¥ —è–∫–∏–º –≤–∏ –≤ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–∏.',
            reply_markup=cancel_keyboard()
        )

    except Exception as e:
        logging.exception(e)


async def input_pack_type(message: types.Message, state: FSMContext):
    try:

        order_db = Orders()

        number_in_list = message.text
        payment: types.ChatMember = await bot.get_chat_member(OWNER, OWNER)

        await state.update_data(number_in_list=number_in_list)
        data = await state.get_data()

        if message.from_user.id != OWNER:

            order_db.create_order_math(
                {data["order_id"]},
                {data["customer_id"]},
                {data["select_object"]},
                {data["number_idz"]},
                {data["number_group"]},
                {data["number_in_list"]},
            )

        await message.reply('–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–∫–æ—Ä–æ –∑–≤–∞–º–∏ –∑–≤\'—è–∂—É—Ç—å—Å—è –Ω–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏', reply_markup=start_menu())

        await message.answer(
            '–í–∞—à —á–µ–∫.\n\n'
            f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
            f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
            f'Username: {message.from_user.username}\n'
            f'First Name: {message.from_user.first_name}\n'
            f'Last Name: {message.from_user.last_name}\n'
            f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
            f'–ù–æ–º–µ—Ä –Ü–î–ó: {data["number_idz"]}\n'
            f'–ì—Ä—É–ø–∞: {data["number_group"]}\n'
            f'–ù–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫—É: {data["number_in_list"]}\n\n'
            '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: 1-2 –¥–Ω—è\n'
            f'–©–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {payment.user.mention}'
        )

        await bot.send_message(
            ADMIN_CHAT,
            f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
            f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
            f'Username: {message.from_user.username}\n'
            f'First Name: {message.from_user.first_name}\n'
            f'Last Name: {message.from_user.last_name}\n'
            f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
            f'–ù–æ–º–µ—Ä –Ü–î–ó: {data["number_idz"]}\n'
            f'–ì—Ä—É–ø–∞: {data["number_group"]}\n'
            f'–ù–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫—É: {data["number_in_list"]}\n'
            )

        del order_db

        await state.reset_state(with_data=True)

    except Exception as e:
        logging.exception(e)


def register_handlers_math(dp: Dispatcher):
    try:
        dp.register_message_handler(start_order, Text(equals='üí∏ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'), state=None)
        dp.register_message_handler(cancel_order, state="*", commands=['back'])
        dp.register_message_handler(cancel_order, Text(equals='–û—Ç–º–µ–Ω–∞'), state="*")
        dp.register_message_handler(input_subject, Text(equals='–í–∏—â–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'), state=Order.waiting_subject)
        dp.register_message_handler(input_number_group, state=Order.waiting_number_idz)
        dp.register_message_handler(input_number_in_list, state=Order.waiting_variant_idz)
        dp.register_message_handler(input_pack_type, state=Order.waiting_pack_idz)
    except Exception as e:
        logging.exception(e)
