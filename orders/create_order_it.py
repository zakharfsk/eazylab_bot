import uuid

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from loguru import logger

from config import OWNER, ADMIN_CHAT, \
    select_object_buttons, it_buttons, CHAT
from create_bot import bot
from create_keyboards.keyboards import subject_keyboard, start_menu, cancel_keyboard, it_keyboard
from database.models import OrderIt


class Order(StatesGroup):
    waiting_subject = State()
    waiting_number_lab_it = State()
    waiting_first_last_name = State()
    waiting_user_group = State()


async def start_order(message: types.Message, state: FSMContext):
    try:
        await state.update_data(customer_id=message.from_user.id, order_id=int(uuid.uuid4().fields[-1]))
        await Order.waiting_subject.set()
        await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç.', reply_markup=subject_keyboard(select_object_buttons).add('–û—Ç–º–µ–Ω–∞'))
    except Exception as e:
        logger.exception(e)


async def cancel_order(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.reset_state(with_data=True)

        await message.reply(
            '–í–∏—Ö—ñ–¥ –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–∫–∞–∑—É\n'
            '–í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
            reply_markup=start_menu()
        )

    except Exception as e:
        logger.exception(e)


async def input_subject(message: types.Message, state: FSMContext):
    try:
        subject = message.text

        if subject in select_object_buttons:
            await state.update_data(select_object=subject)
            await Order.next()
            await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É –∑ –Ü–¢.', reply_markup=it_keyboard().add('–û—Ç–º–µ–Ω–∞'))
        else:
            await message.reply(
                '–£–ø—Å—Å...\n'
                '–ù–∞–∂–∞–ª—å —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–º–∞—î'
            )
    except Exception as e:
        logger.exception(e)


async def input_number_lab_it(message: types.Message, state: FSMContext):
    try:
        number_lab = message.text

        if number_lab in it_buttons:
            await state.update_data(number_lab=number_lab)
            await message.reply('–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –Ü–º\'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ.', reply_markup=cancel_keyboard())
            await Order.next()

        else:
            await message.reply(
                '–£–ø—Å...\n'
                '–ù–∞–∂–∞–ª—å –≤ –Ω–∞—Å –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó'
            )

    except Exception as e:
        logger.exception(e)


async def input_name(message: types.Message, state: FSMContext):
    try:
        name = message.text
        await state.update_data(name=name)
        await Order.next()
        await message.reply('–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É.(–≤ —Ñ–æ—Ä–º–∞—Ç—ñ –ö–Ü-21-2)')
    except Exception as e:
        logger.exception(e)


async def input_group(message: types.Message, state: FSMContext):
    try:
        user_group = message.text
        payments: types.ChatMember = await bot.get_chat_member(OWNER, OWNER)

        await state.update_data(user_group=user_group)
        data = await state.get_data()

        await message.reply(
            '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–∫–æ—Ä–æ –∑–≤–∞–º–∏ –∑–≤\'—è–∂—É—Ç—å—Å—è –Ω–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏',
            reply_markup=start_menu()
        )

        if message.from_user.id != OWNER:
            OrderIt.create(
                id_customer=data.get('customer_id'),
                id_order=data.get('order_id'),
                name_object=data.get('select_object'),
                number_lab=data.get('number_lab'),
                first_name_and_last_name=data.get('name'),
                user_group=data.get('user_group')
            )

        await message.answer(
            '–í–∞—à —á–µ–∫.\n\n'
            f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
            f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
            f'Username: {message.from_user.username}\n'
            f'First Name: {message.from_user.first_name}\n'
            f'Last Name: {message.from_user.last_name}\n'
            f'–í–∫–∞–∑–∞–Ω–µ –Ü\'–º—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ: {data["name"]}\n'
            f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
            f'–ù–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó: {data["number_lab"]}\n'
            f'–ì—Ä—É–ø–∞: {data["user_group"]}\n\n'
            '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: 1-2 –¥–Ω—è\n'
            f'–©–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {payments.user.mention}'
        )

        await bot.send_message(
            CHAT,
            f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
            f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
            f'Username: {message.from_user.username}\n'
            f'First Name: {message.from_user.first_name}\n'
            f'Last Name: {message.from_user.last_name}\n'
            f'–í–∫–∞–∑–∞–Ω–µ –Ü\'–º—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ: {data["name"]}\n'
            f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
            f'–ù–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó: {data["number_lab"]}\n'
            f'–ì—Ä—É–ø–∞: {data["user_group"]}'
        )

        await state.reset_state(with_data=True)

    except Exception as e:
        logger.exception(e)


def register_handlers_create_it(dp: Dispatcher):
    dp.register_message_handler(start_order, Text(equals='üí∏ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'), state=None)
    dp.register_message_handler(cancel_order, state="*", commands=['back'])
    dp.register_message_handler(cancel_order, Text(equals='–û—Ç–º–µ–Ω–∞'), state="*")
    dp.register_message_handler(input_subject, Text(equals='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó'),
                                state=Order.waiting_subject)
    dp.register_message_handler(input_number_lab_it, state=Order.waiting_number_lab_it)
    dp.register_message_handler(input_name, state=Order.waiting_first_last_name)
    dp.register_message_handler(input_group, state=Order.waiting_user_group)
