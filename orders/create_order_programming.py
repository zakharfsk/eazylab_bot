import uuid

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from loguru import logger

from config import OWNER, ADMIN_CHAT, labaratories_buttons, \
    select_object_buttons
from create_bot import bot
from create_keyboards.keyboards import subject_keyboard, labaratories_keyboard, start_menu, cancel_keyboard
from database.models import OrderProgramming


class Order(StatesGroup):
    waiting_subject = State()
    waiting_number_lab = State()
    waiting_variant = State()
    waiting_zvit = State()
    waiting_count_task = State()


async def start_order(message: types.Message, state: FSMContext):
    try:
        await state.update_data(customer_id=message.from_user.id, order_id=int(uuid.uuid4().fields[-1]))
        await Order.waiting_subject.set()
        await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç.', reply_markup=subject_keyboard(select_object_buttons).add('–û—Ç–º–µ–Ω–∞'))
    except Exception as e:
        logger.exception(e)


async def cancel_order(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.reset_state(with_data=True)

        await message.reply(
            '–í–∏—Ö—ñ–¥ –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–∫–∞–∑—É\n'
            '–í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
            reply_markup=start_menu()
        )

    except Exception as e:
        logger.exception(e)


async def input_subject(message: types.Message, state: FSMContext):
    try:
        subject = message.text

        if subject in select_object_buttons:
            await state.update_data(select_object=subject)
            await Order.next()
            await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É.', reply_markup=labaratories_keyboard().add('–û—Ç–º–µ–Ω–∞'))
        else:
            await message.reply(
                '–£–ø—Å—Å...\n'
                '–ù–∞–∂–∞–ª—å —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–º–∞—î'
            )
    except Exception as e:
        logger.exception(e)


async def input_number_lab(message: types.Message, state: FSMContext):
    try:
        num_lab = message.text

        if num_lab in labaratories_buttons:
            await state.update_data(number_lab=num_lab)
            await message.reply('–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∞.', reply_markup=cancel_keyboard())
            await Order.next()
        else:
            await message.reply(
                '–£–ø—Å...\n'
                '–ù–∞–∂–∞–ª—å –≤ –Ω–∞—Å –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó'
            )
    except Exception as e:
        logger.exception(e)


async def input_lab_variant(message: types.Message, state: FSMContext):
    try:
        try:
            variant = message.text
            await state.update_data(variant_lab=int(variant))
            await Order.next()
            await message.reply(
                '–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å( —Ü—ñ–Ω—É –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤ –ø—Ä–∞–π—Å—ñ –¥–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó )\n'
                '<code>–£–≤–∞–≥–∞! –Ø–∫—â–æ –≤–∏ –≤–∫–∞–∂–µ—Ç–µ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å, —Ç–æ —Ü–µ–π –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–¥–∞—Ç–∏—Å—è.</code>',
                reply_markup=cancel_keyboard()
            )
        except ValueError:
            await message.reply('–ù–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.')
    except Exception as e:
        logger.exception(e)


async def input_task(message: types.Message, state: FSMContext):
    try:
        try:
            task = message.text
            await state.update_data(task=int(task))
            await Order.next()
            await message.reply(
                '–Ø–∫—â–æ –í–∏ —Ö–æ—á–µ—Ç–µ –∑ –∑–≤—ñ—Ç–∞–º–∏ —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>+</b>, —è–∫—â–æ –±–µ–∑ –∑–≤—ñ—Ç—ñ–≤ —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>-</b>',
                reply_markup=cancel_keyboard()
            )
        except ValueError:
            await message.reply('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.')
    except Exception as e:
        logger.exception(e)


async def input_zvit(message: types.Message, state: FSMContext):
    try:
        z = message.text.split()
        payment: types.ChatMember = await bot.get_chat_member(OWNER, OWNER)

        if z[0] == '+' or z[0] == '-' and len(z) == 1:
            await state.update_data(zvit=z[0])

            data = await state.get_data()

            if message.from_user.id != OWNER:
                OrderProgramming.create(
                    id_order=data['order_id'],
                    id_customer=data['customer_id'],
                    name_object=data['select_object'],
                    number_lab=data['number_lab'],
                    variant_lab=data['variant_lab'],
                    tasks=str(data['task']),
                    zvit=data['zvit']
                )

            await message.reply('–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–∫–æ—Ä–æ –∑–≤–∞–º–∏ –∑–≤\'—è–∂—É—Ç—å—Å—è –Ω–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏',
                                reply_markup=start_menu())

            await message.answer(
                '–í–∞—à —á–µ–∫.\n\n'
                f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
                f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
                f'Username: {message.from_user.username}\n'
                f'First Name: {message.from_user.first_name}\n'
                f'Last Name: {message.from_user.last_name}\n'
                f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
                f'–ù–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó: {data["number_lab"]}\n'
                f'–ó –∑–≤—ñ—Ç–∞–º–∏: {data["zvit"]}\n'
                f'–í–∞—Ä—ñ–∞–Ω—Ç –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó: {data["variant_lab"]}\n'
                f'–ó–∞–≤–¥–∞–Ω–Ω—è: {data["task"]}\n\n'
                '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: 1-2 –¥–Ω—è\n'
                f'–©–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {payment.user.mention}'
            )

            await bot.send_message(
                ADMIN_CHAT,
                f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
                f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
                f'Username: {message.from_user.username}\n'
                f'First Name: {message.from_user.first_name}\n'
                f'Last Name: {message.from_user.last_name}\n'
                f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
                f'–ù–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó: {data["number_lab"]}\n'
                f'–ó –∑–≤—ñ—Ç–∞–º–∏: {data["zvit"]}\n'
                f'–í–∞—Ä—ñ–∞–Ω—Ç –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó: {data["variant_lab"]}\n'
                f'–ó–∞–≤–¥–∞–Ω–Ω—è: {data["task"]}'
            )

            await state.reset_state(with_data=True)

        else:
            await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–≤–æ–¥. –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')

    except Exception as e:
        logger.exception(e)


def register_handlers_programming(dp: Dispatcher):
    dp.register_message_handler(start_order, Text(equals='üí∏ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'), state=None)
    dp.register_message_handler(cancel_order, state="*", commands=['back'])
    dp.register_message_handler(cancel_order, Text(equals='–û—Ç–º–µ–Ω–∞'), state="*")
    dp.register_message_handler(input_subject, Text(equals='–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è'), state=Order.waiting_subject)
    dp.register_message_handler(input_number_lab, state=Order.waiting_number_lab)
    dp.register_message_handler(input_lab_variant, state=Order.waiting_variant)
    dp.register_message_handler(input_task, state=Order.waiting_zvit)
    dp.register_message_handler(input_zvit, state=Order.waiting_count_task)
