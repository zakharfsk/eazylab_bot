import uuid

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from loguru import logger

from config import OWNER, select_object_buttons, ADMIN_CHAT
from create_bot import bot
from create_keyboards.keyboards import subject_keyboard, start_menu
from database.db import Orders
from database.models import OrderEnglish


class Order(StatesGroup):
    waiting_subject = State()
    waiting_input_files = State()
    waiting_input_group = State()
    waiting_input_tasks = State()


async def start_order_english(message: types.Message, state: FSMContext):
    try:
        await state.update_data(customer_id=message.from_user.id, order_id=int(uuid.uuid4().fields[-1]))
        await Order.waiting_subject.set()
        await message.reply('–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç.', reply_markup=subject_keyboard(select_object_buttons).add('–û—Ç–º–µ–Ω–∞'))
    except Exception as e:
        logger.exception(e)


async def cancel_order(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.reset_state(with_data=True)

        await message.reply(
            '–í–∏—Ö—ñ–¥ –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–∫–∞–∑—É\n'
            '–í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
            reply_markup=start_menu()
        )

    except Exception as e:
        logger.exception(e)


async def input_subject(message: types.Message, state: FSMContext):
    try:
        subject = message.text
        if subject in select_object_buttons:
            await state.update_data(select_object=subject)
            await Order.next()
            await message.reply(
                '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–∞–π–ª –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞ ^^',
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞')
            )
        else:
            await message.reply(
                '–£–ø—Å—Å...\n'
                '–ù–∞–∂–∞–ª—å —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–º–∞—î'
            )
    except Exception as e:
        logger.exception(e)


async def input_files(message: types.Message, state: FSMContext):
    try:
        await state.update_data(files=message.document.file_id)
        await message.answer('–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É.(–≤ —Ñ–æ—Ä–º–∞—Ç—ñ –ö–Ü-21-1)',
                             reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞'))
        await Order.next()

    except Exception as e:
        logger.exception(e)


async def input_group(message: types.Message, state: FSMContext):
    try:
        group = message.text
        await state.update_data(user_group=group)

        await message.answer('–û–ø–∏—à—ñ—Ç—å —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏.',
                             reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞'))
        await Order.next()

    except Exception as e:
        logger.exception(e)


async def input_task(message: types.Message, state: FSMContext):
    try:
        tasks = message.text
        payments: types.ChatMember = await bot.get_chat_member(OWNER, OWNER)
        await state.update_data(task=tasks)

        data = await state.get_data()

        order_db = Orders()

        if message.from_user.id != OWNER:
            OrderEnglish.create(
                id_order=data['order_id'],
                id_customer=data['customer_id'],
                name_object=data['select_object'],
                files=data['files'],
                user_group=data['user_group'],
                task=data['task']
            )

        await message.reply(
            '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–∫–æ—Ä–æ –∑–≤–∞–º–∏ –∑–≤\'—è–∂—É—Ç—å—Å—è –Ω–∞—à—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏',
            reply_markup=start_menu()
        )

        await message.answer(
            '–í–∞—à —á–µ–∫.\n\n'
            f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
            f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
            f'Username: {message.from_user.username}\n'
            f'First Name: {message.from_user.first_name}\n'
            f'Last Name: {message.from_user.last_name}\n'
            f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
            f'–ì—Ä—É–ø–∞: {data["user_group"]}\n'
            f'–ó–∞–≤–¥–∞–Ω–Ω—è: {data["task"]}\n\n'
            '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: 1-2 –¥–Ω—è\n'
            f'–©–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ {payments.user.mention}\n\n'
            f'–§–∞–π–ª —è–∫–∏–π –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏:'
        )

        await bot.send_document(message.from_user.id, data['files'])

        await bot.send_message(
            ADMIN_CHAT,
            f'ID –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n'
            f'ID –∑–∞–º–æ–≤–Ω–∏–∫–∞: {data["customer_id"]}\n'
            f'Username: {message.from_user.username}\n'
            f'First Name: {message.from_user.first_name}\n'
            f'Last Name: {message.from_user.last_name}\n'
            f'–ü—Ä–µ–¥–º–µ—Ç: {data["select_object"]}\n'
            f'–ì—Ä—É–ø–∞: {data["user_group"]}\n'
            f'–ó–∞–≤–¥–∞–Ω–Ω—è: {data["task"]}\n\n'
        )

        await bot.send_document(
            ADMIN_CHAT,
            data['files']
        )

        del order_db

        await state.reset_state(with_data=True)

    except Exception as e:
        logger.exception(e)


def register_message_handler_create_order_english(dp: Dispatcher):
    dp.register_message_handler(start_order_english, Text(equals='üí∏ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'), state=None)
    dp.register_message_handler(cancel_order, state="*", commands=['back'])
    dp.register_message_handler(cancel_order, Text(equals='–û—Ç–º–µ–Ω–∞'), state="*")
    dp.register_message_handler(input_subject, Text(equals='–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞'),
                                state=Order.waiting_subject)
    dp.register_message_handler(input_files, content_types=types.ContentTypes.DOCUMENT,
                                state=Order.waiting_input_files)
    dp.register_message_handler(input_group, state=Order.waiting_input_group)
    dp.register_message_handler(input_task, state=Order.waiting_input_tasks)
