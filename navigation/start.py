import logging

import psycopg2
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Command

from config import OWNER, USER, HOST, DATABASE, PASSWORD
from create_bot import bot
from create_keyboards.keyboards import start_menu

username = USER
host = HOST
database = DATABASE
password = PASSWORD
port = 5432


async def _start_command(message: types.Message, state: FSMContext):
    try:
        conn = psycopg2.connect(
            user=username,
            host=host,
            database=database,
            password=password,
            port=port
        )

        cursor = conn.cursor()

        cursor.execute(f'SELECT id FROM user_info WHERE id = {message.from_user.id};')
        user_id = cursor.fetchone()

        if user_id is None and message.from_user.is_bot is False:
            cursor.execute(
                f'INSERT INTO public.user_info(id, username, first_name, last_name) '
                f'VALUES ('
                f'{message.from_user.id}, '
                f'\'{message.from_user.username}\', '
                f'\'{message.from_user.first_name}\', '
                f'\'{message.from_user.last_name}\''
                f');'
            )
            conn.commit()
            await bot.send_message(
                OWNER,
                '–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–æ—Ç–∞\n'
                f'ID: {message.from_user.id}\n'
                f'Username: {message.from_user.username}\n'
                f'First Name: {message.from_user.first_name}\n'
                f'Last Name: {message.from_user.last_name}'
            )
        conn.commit()

        await message.answer(
            '–ü—Ä–∏–≤—ñ—Ç!\n' \
            '–ó –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç–∞ —Ç–∏ –∑–∞–º–æ–≤–∏—à –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ —Ä–æ–±–æ—Ç–∏. ü•∞ü•∞ü•∞\n\n'
            '–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª—é–≤–∞—Ç–∏ –∑–∞–∫–∞–∑–∏ –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é, '
            '–Ω–∞–∂–∞–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</b>\n'
            '–Ø–∫—â–æ –∑–∞–∫–∞–∑ –±—É–¥–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–π –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É, –≤—ñ–Ω —Ä–æ–∑–≥–ª—è–¥–∞—Ç–∏—Å—è –Ω–µ –±—É–¥–µ. –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è! üòäüòäüòä',
            reply_markup=start_menu()
        )
        await state.reset_state(with_data=True)
    except Exception as e:
        logging.exception(e)
    finally:
        if conn:
            cursor.close()
            conn.close()


def register_handlers_start_command(dp: Dispatcher):
    try:
        dp.register_message_handler(_start_command, Command('start'), state="*")
    except Exception as e:
        logging.exception(e)
