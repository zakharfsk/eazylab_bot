import aiogram
import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text

from create_bot import bot
from create_keyboards.keyboards import instruction_keyboard

phrases_price = [
    '1. –©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–∞–π—Å –¥–æ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö —Ä–æ–±—ñ—Ç –∑ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –Ω–∞–∂–º—ñ—Ç—å –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é <b>–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–∞–π—Å</b>.',
    '2. –î–∞–ª—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç.',
    '3. –ü—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –í–∏ –≤–∏–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤–∞–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤–∏–±—ñ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö –ø–æ —Ü—å–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—ñ.',
    '4. –í–∏–±—Ä–∞–≤—à–∏ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó, –≤–∞–º –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ü—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É, –¥–µ –±—É–¥–µ –≤–∫–∞–∑–∞–Ω–∞ —Ü—ñ–Ω–∞.'
]

phrases_order = [
    '1. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É, –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞–∂–º—ñ—Ç—å <b>–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>.',
    '2. –î–∞–ª—ñ –∑ —Å–ø–∏—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç.',
    '3. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –æ–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó.',
    '4. –í–∫–∞–∂—ñ—Ç—å –Ω–æ—Å–º–µ—Ä –≤–∞—à–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∞. –í–∞—Ä—ñ–∞–Ω—Ç –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º, —Ç–µ–∫—Å –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ )',
    '5. –î–∞–ª—ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å.\n\n'
    '–î–µ —ó—Ö –≤–∑—è—Ç–∏ —ñ —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞—Ç–∏?\n'
    '–á—Ö –≤–∑—è—Ç–∏ –º–æ–∂–Ω–∞ –≤ –ø—Ä–∞–π—Å—ñ –¥–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö( —è–∫ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–∞–π—Å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —î )\n\n'
    '–ù–∞–ø—Ä–∏–ª–∫–∞–¥, –º–∏ –∑–∞–∫–∞–∑—É—î–º–æ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É ‚Ññ1, —Ç–æ–¥—ñ —Ç—Ä–µ–±–∞ –±—É–¥–µ –Ω–∞–ø–∏—Å–∞—Ç–∏: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å –∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ—ó—ñ, '
    '–Ω–æ–º–µ—Ä–∏ –∑–∞–≤–¥–∞–Ω—å —ñ –∑ –∑–≤—ñ—Ç–æ–º —á–∏ –±–µ–∑, –ø—Ä–∏–∫–ª–∞–¥ –Ω–∞ —Ñ–æ—Ç–æ( –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –∑–∞–ø–æ–≤–Ω—é—é—Ç—å—Å—è –∞–Ω–∫–µ—Ç–∏ –¥–æ —ñ–Ω—à–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∏—Ö).',
    '6. –ü—ñ—Å–ª—è —á–æ–≥–æ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–≤—ñ–π —á–µ–∫.'
]


async def how_to_used_bot(message: types.Message):
    try:
        await message.answer(
            '–Ø–∫–∞ —Å–∞–º–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?',
            reply_markup=instruction_keyboard().add('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        )
    except Exception as e:
        logging.exception(e)


async def prices(message: types.Message):
    try:

        for i in range(len(phrases_price)):
            await bot.send_photo(
                message.from_user.id,
                open(f'data/photo/price/price{i}.png', 'rb'),
                caption=f'{phrases_price[i]}'
            )
    except Exception as e:
        logging.exception(e)


async def how_correctly_take_order(message: types.Message):
    try:
        for i in range(len(phrases_order)):
            await bot.send_photo(
                message.from_user.id,
                open(f'data/photo/order/order{i}.png', 'rb'),
                caption=f'{phrases_order[i]}'
            )
    except Exception as e:
        logging.exception(e)


async def payments(message: types.Message):
    try:
        await bot.send_photo(
            message.from_user.id,
            open('data/photo/payments/paymants.png', 'rb'),
            caption='–í —á–µ–∫–æ–≤—ñ –≤–∫–∞–∑–∞–Ω–∞ –ª—é–¥–∏–Ω–∞ –¥–æ —è–∫–æ—ó –∑–≤–µ—Ä–∞—Ç–∞—Ç–∏—è –∑–∞ –æ–ø–ª–∞—Ç–æ—é.\n' \
                    '–û–ø–ª–∞—Ç–∏—Ç–∏ –º–æ–∂–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∞–±–æ –Ω–∞–ª–æ–º.\n\n' \
                    '–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞—á–∏–Ω–∞—î—Ç—å—Å—è –ª–∏—à–µ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏'
        )
    except Exception as e:
        logging.exception(e)


def register_handler_how_to_used_bot(dp: Dispatcher):
    try:
        dp.register_message_handler(how_to_used_bot, Text(equals='üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'))
        dp.register_message_handler(prices, Text(equals='–¶—ñ–Ω–∏'))
        dp.register_message_handler(how_correctly_take_order, Text(equals='–Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫–∞–∑?'))
        dp.register_message_handler(payments, Text(equals='–û–ø–ª–∞—Ç–∞'))
    except Exception as e:
        logging.exception(e)
